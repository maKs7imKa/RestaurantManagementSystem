<!DOCTYPE html>
<html lang="uk">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Профіль</title>
        <link rel="stylesheet" href="/profile.css" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    </head>
    <body>
        <a href="/">Головна</a>

        <div class="profile-container">
            <br>
            <h2>Ваші замовлення</h2>
            <% if (orders && orders.length > 0) { %>
            <table>
                <thead>
                    <tr>
                        <th>Страви</th>
                        <th>Час замовлення</th>
                        <th>Статус доставки</th>
                        <th>Метод оплати</th>
                        <th>Статус оплати</th>
                    </tr>
                </thead>
                <tbody>
                    <% let groupedOrders = {}; %>
                    <% orders.forEach(order => { %>
                        <% 
                            const groupKey = `${order.createdAt.toISOString()}`; // Використовуємо час створення як ключ
                            if (!groupedOrders[groupKey]) { groupedOrders[groupKey] = []; } 
                            groupedOrders[groupKey].push(order); 
                        %>
                    <% }); %>
        
                    <% Object.keys(groupedOrders).forEach(groupKey => { %>
                        <tr>
                            <td>
                                <details>
                                    <summary>Страви</summary>
                                    <ul>
                                        <% groupedOrders[groupKey].forEach(order => { %>
                                            <li><%= order.dish %> - <%= order.quantity %> шт.</li>
                                        <% }); %>
                                    </ul>
                                </details>
                            </td>
                            <td><%= new Date(groupKey).toLocaleTimeString() %></td>
                            <td>
                                <div class="delivery-timeline" 
                                     data-status-index="<%= ['Pending', 'Processing', 'Cooking', 'OnTheWay', 'Delivered'].indexOf(groupedOrders[groupKey][0].status) !== -1 ? ['Pending', 'Processing', 'Cooking', 'OnTheWay', 'Delivered'].indexOf(groupedOrders[groupKey][0].status) : 0 %>">
                                </div>
                            </td>
                            <td><%= groupedOrders[groupKey][0].paymentMethod %></td>
                            <td>
                                <span class="payment-<%= groupedOrders[groupKey][0].paymentStatus.toLowerCase() %>">
                                    <%= groupedOrders[groupKey][0].paymentStatus %>
                                </span>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
            <% } else { %>
            <div class="empty-state">
                <p>У вас ще немає замовлень</p>
            </div>
            <% } %>
        </div>
            
        <h2>Бронювання</h2>
        <% if (reservations && reservations.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <th>Номер столика</th>
                    <th>Дата</th>
                    <th>Час</th>
                    <th>Попереднє замовлення</th>
                    <th>Дії</th>
                </tr>
            </thead>
            <tbody>
                <% reservations.forEach(reservation => { %>
                <tr>
                    <td><%= reservation.tableNumber %></td>
                    <td><%= reservation.date.toLocaleDateString() %></td>
                    <td><%= reservation.time %></td>
                    <td><%= reservation.preOrder ? reservation.preOrder : 'Без попереднього замовлення' %></td>
                    <td>
                        <form action="/profile/reservations/cancel/<%= reservation.id %>" method="POST">
                            <button type="submit">Скасувати</button>
                        </form>
                    </td>
                </tr>
                <% }); %>
            </tbody>
        </table>
        <% } else { %>
        <div class="empty-state">
            <p>У вас ще немає бронювань</p>
        </div>
        <% } %>
        
        <!-- JavaScript для візуалізації доставки -->
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Ініціалізація всіх таймлайнів
            const timelines = document.querySelectorAll('.delivery-timeline');
            
            timelines.forEach(timeline => {
                const status = timeline.getAttribute('data-status');
                const statusIndex = parseInt(timeline.getAttribute('data-status-index'));
                const allStatuses = ['Pending', 'Processing', 'Cooking', 'OnTheWay', 'Delivered'];
                
                // Створення прогрес-бару
                const progressPercentage = (statusIndex / (allStatuses.length - 1)) * 100;
                const progressBar = document.createElement('div');
                progressBar.className = 'timeline-progress';
                progressBar.style.width = `${progressPercentage}%`;
                timeline.appendChild(progressBar);
                
                // Створення кроків
                allStatuses.forEach((stepStatus, index) => {
                    const step = document.createElement('div');
                    step.className = 'timeline-step';
                    
                    if (index === statusIndex) {
                        step.classList.add('timeline-step-active');
                    } else if (index < statusIndex) {
                        step.classList.add('timeline-step-completed');
                    }
                    
                    const icon = document.createElement('i');
                    icon.className = 'fas';
                    
                    switch (stepStatus) {
                        case 'Pending':
                            icon.classList.add('fa-file-invoice');
                            break;
                        case 'Processing':
                            icon.classList.add('fa-utensils');
                            break;
                        case 'Cooking':
                            icon.classList.add('fa-fire');
                            break;
                        case 'OnTheWay':
                            icon.classList.add('fa-motorcycle');
                            icon.classList.add('icon-moving');
                            break;
                        case 'Delivered':
                            icon.classList.add('fa-check');
                            break;
                    }
                    
                    step.appendChild(icon);
                    timeline.appendChild(step);
                });
                
                // Створення контейнера для написів
                const labelsContainer = document.createElement('div');
                labelsContainer.className = 'timeline-labels';
                
                // Створення написів
                allStatuses.forEach((labelStatus, index) => {
                    const label = document.createElement('div');
                    label.className = 'timeline-label';
                    
                    if (index === statusIndex) {
                        label.classList.add('timeline-label-active');
                    } else if (index < statusIndex) {
                        label.classList.add('timeline-label-completed');
                    }
                    
                    label.textContent = labelStatus === 'OnTheWay' ? 'On The Way' : labelStatus;
                    labelsContainer.appendChild(label);
                });
                
                // Додавання написів після таймлайну
                timeline.parentNode.insertBefore(labelsContainer, timeline.nextSibling);
            });
            
            // // Функція для автоматичного оновлення статусу (кожні 5 хвилин)
            // function updateDeliveryStatus() {
            //     timelines.forEach(timeline => {
            //         const statusIndex = parseInt(timeline.getAttribute('data-status-index'));
            //         const allStatuses = ['Pending', 'Processing', 'Cooking', 'OnTheWay', 'Delivered'];
                    
            //         // Переходимо до наступного статусу, якщо це не останній
            //         if (statusIndex < allStatuses.length - 1) {
            //             const nextStatusIndex = statusIndex + 1;
            //             const newStatus = allStatuses[nextStatusIndex];
                        
            //             // Оновлюємо атрибути
            //             timeline.setAttribute('data-status', newStatus);
            //             timeline.setAttribute('data-status-index', nextStatusIndex);
                        
            //             // Оновлюємо прогрес-бар
            //             const progressBar = timeline.querySelector('.timeline-progress');
            //             const newProgressPercentage = (nextStatusIndex / (allStatuses.length - 1)) * 100;
            //             progressBar.style.width = `${newProgressPercentage}%`;
                        
            //             // Оновлюємо кроки
            //             const steps = timeline.querySelectorAll('.timeline-step');
            //             steps[statusIndex].classList.remove('timeline-step-active');
            //             steps[statusIndex].classList.add('timeline-step-completed');
            //             steps[nextStatusIndex].classList.add('timeline-step-active');
                        
            //             // Оновлюємо написи
            //             const labels = timeline.nextSibling.querySelectorAll('.timeline-label');
            //             labels[statusIndex].classList.remove('timeline-label-active');
            //             labels[statusIndex].classList.add('timeline-label-completed');
            //             labels[nextStatusIndex].classList.add('timeline-label-active');
                        
            //             // Оновлюємо текстовий статус
            //             const statusElement = timeline.previousElementSibling;
            //             statusElement.textContent = newStatus === 'OnTheWay' ? 'On The Way' : newStatus;
            //             statusElement.className = `status status-${newStatus.toLowerCase()}`;
            //         }
            //     });
            // }
            
            // // Встановлюємо інтервал оновлення (5 хвилин = 300000 мс)
            // // Для тестування можна змінити на менший інтервал, наприклад 10000 мс (10 секунд)
            // setInterval(updateDeliveryStatus, 200000);
        });

        setInterval(async () => {
            const response = await fetch('/profile/orders'); // Створіть окремий маршрут для отримання замовлень
            const updatedOrders = await response.json();

            // Оновіть DOM відповідно до нових даних
            console.log(updatedOrders);
        }, 300000); // Оновлення кожні 5 хвилин

        document.addEventListener('DOMContentLoaded', function() {
            // Existing timeline code remains...
            
            // Add close button to details popups
            const detailsElements = document.querySelectorAll('details');
            
            detailsElements.forEach(details => {
                details.addEventListener('toggle', function() {
                    if (this.open) {
                        const popup = this.querySelector('ul');
                        
                        // Create close button if it doesn't exist
                        if (!popup.querySelector('.popup-close')) {
                            const closeButton = document.createElement('span');
                            closeButton.className = 'popup-close';
                            closeButton.innerHTML = '×';
                            closeButton.title = 'Close';
                            
                            // Add click event to close button
                            closeButton.addEventListener('click', function(event) {
                                event.stopPropagation();
                                details.open = false;
                            });
                            
                            popup.appendChild(closeButton);
                        }
                    }
                });
            });
            
            // Close on ESC key press
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    detailsElements.forEach(details => {
                        if (details.open) {
                            details.open = false;
                        }
                    });
                }
            });
            
            // Close on click outside
            document.addEventListener('click', function(event) {
                // Check if any details element is open
                detailsElements.forEach(details => {
                    if (details.open) {
                        // Check if click target is outside the summary and its popup content
                        const popup = details.querySelector('ul');
                        const summary = details.querySelector('summary');
                        
                        // If click is not on the popup or summary, close the details
                        if (!popup.contains(event.target) && event.target !== summary) {
                            details.open = false;
                        }
                    }
                });
            });
            
            // Prevent clicks inside the popup from closing it
            const popupContents = document.querySelectorAll('details ul');
            popupContents.forEach(popup => {
                popup.addEventListener('click', function(event) {
                    event.stopPropagation();
                });
            });
        });
        </script>
    </body>
</html>